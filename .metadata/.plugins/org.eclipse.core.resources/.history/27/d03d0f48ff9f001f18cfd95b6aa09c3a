package com.ezen.spring.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.ezen.spring.domain.BoardDTO;
import com.ezen.spring.domain.BoardVO;
import com.ezen.spring.domain.FileVO;
import com.ezen.spring.domain.PagingVO;
import com.ezen.spring.handler.FileHandler;
import com.ezen.spring.handler.PagingHandler;
import com.ezen.spring.service.BoardService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
@RequestMapping("/board/*")
@Controller
public class BoardController {

    // 생성자 주입 시 객체는 final로 생성
    private final BoardService bsv;
    private final FileHandler fh;

    // /board/register 경로에 대한 GET 요청 시 register.jsp로 이동
    @GetMapping("/register")
    public void register() {}

    // 첨부파일을 포함한 게시글 등록 처리
    @PostMapping("/insert")
    public String insert(BoardVO bvo, MultipartFile[] files) {
        log.info(">>> insert bvo > {}", bvo);
        List<FileVO> flist = null;

        // 첨부파일이 있는 경우 처리
        if (files[0].getSize() > 0) {
            // 파일의 내용을 기반으로 List<FileVO>를 생성
            flist = fh.uploadFiles(files);
            log.info(">>>>> flist > {}", flist);
        }

        // BoardDTO 객체 생성 (게시글 정보와 파일 리스트를 포함)
        BoardDTO bdto = new BoardDTO(bvo, flist);
        int isOk = bsv.insert(bdto);
        log.info(">>>> insert > {}", isOk > 0 ? "OK" : "Fail");
        // 등록 후 메인 페이지로 리다이렉트
        return "redirect:/";
    }

    // 게시글 목록 조회
    @GetMapping("/list")
    public String list(Model m, PagingVO pgvo) {
        // Model 객체를 사용하여 데이터를 뷰로 전달
        List<BoardVO> list = bsv.getList(pgvo);
        // 전체 게시글 수를 구하여 페이징 처리에 활용
        int totalCount = bsv.getTotal(pgvo);
        PagingHandler ph = new PagingHandler(totalCount, pgvo);
        log.info(">>> totalCount > {}", totalCount);
        m.addAttribute("list", list);
        m.addAttribute("ph", ph);
        return "/board/list";
    }

    // 게시글 상세 보기 및 수정 화면 (경로에 따라 처리 분기)
    @GetMapping({"/detail", "/modify"})
    public void detail(int bno, Model m, HttpServletRequest request) {
        // 경로에 따라 조회수 증가 여부 결정
        String path = request.getServletPath();
        log.info(">>>>>>>>>>>>>>>>>>>> path > {} ", path);
        if (path.equals("/board/detail")) {
            bsv.readCountUp(bno); // 조회수 증가
        }
        BoardDTO bdto = bsv.getDetail(bno);
        m.addAttribute("bdto", bdto); // 상세 정보 전달
    }

    // 게시글 수정 처리
    @PostMapping("/update")
    public String update(BoardVO bvo, @RequestParam(name = "files", required = false) MultipartFile[] files) {
        List<FileVO> flist = null;

        // 첨부파일이 있는 경우 처리
        if (files != null && files[0].getSize() > 0) {
            flist = fh.uploadFiles(files);
        }
        int isOk = bsv.modify(new BoardDTO(bvo, flist));
        log.info(">>>> update > {}", isOk > 0 ? "OK" : "Fail");

        // 수정 후 상세 페이지로 리다이렉트
        return "redirect:/board/detail?bno=" + bvo.getBno();
    }

    // 게시글 삭제 처리
    @GetMapping("/delete")
    public String delete(int bno) {
        int isOk = bsv.delete(bno);
        log.info(">>>> delete > {}", isOk > 0 ? "OK" : "Fail");
        return "redirect:/board/list"; // 목록 페이지로 리다이렉트
    }

    // 첨부파일 삭제 (AJAX로 처리)
    @ResponseBody
    @DeleteMapping("/file/{uuid}")
    public String fileDelete(@PathVariable("uuid") String uuid) {
        int isOk = bsv.removeFile(uuid);
        return isOk > 0 ? "1" : "0"; // 성공 여부 반환
    }

}
