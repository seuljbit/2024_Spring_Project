/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.96
 * Generated at: 2024-11-12 03:52:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.layout;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class footer_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("    <div class=\"menu-btn\">\r\n");
      out.write("        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" fill=\"currentColor\" class=\"bi bi-list\" viewBox=\"0 0 16 16\">\r\n");
      out.write("                <path fill-rule=\"evenodd\" d=\"M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5\"/>\r\n");
      out.write("        </svg>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"sidebar\">\r\n");
      out.write("        <div class=\"x-btn\">\r\n");
      out.write("            <a href=\"#\" class=\"close-btn\">\r\n");
      out.write("                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" fill=\"currentColor\" class=\"bi bi-x\" viewBox=\"0 0 16 16\">\r\n");
      out.write("                	<path d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708\"/>\r\n");
      out.write("                </svg>\r\n");
      out.write("            </a>\r\n");
      out.write("        </div>\r\n");
      out.write("        <ul>\r\n");
      out.write("		    <li> <a href=\"/vinyl/sale/search?hip-hop\"> <input type=\"checkbox\" id=\"hiphop\" value=\"hip-hop\" class=\"genre-checkbox\"> <label for=\"hiphop\"> <span> HIP-HOP </span> </label> </a> </li>\r\n");
      out.write("		    <li> <a href=\"/vinyl/sale/search?jazz\"> <input type=\"checkbox\" id=\"jazz\" value=\"jazz\" class=\"genre-checkbox\"><label for=\"jazz\"> <span> JAZZ </span> </label></a></li>\r\n");
      out.write("		    <li> <a href=\"/vinyl/sale/search?rock\"> <input type=\"checkbox\" id=\"rock\" value=\"rock\" class=\"genre-checkbox\"><label for=\"rock\"> <span> ROCK </span> </label></a></li>\r\n");
      out.write("		    <li> <a href=\"/vinyl/sale/search?pop\"> <input type=\"checkbox\" id=\"pop\" value=\"pop\" class=\"genre-checkbox\"><label for=\"pop\"> <span> POP </span> </label></a></li>\r\n");
      out.write("		    <li> <a href=\"/vinyl/sale/search?korean\"> <input type=\"checkbox\" id=\"korean\" value=\"korean\" class=\"genre-checkbox\"><label for=\"korean\"> <span> KOREAN </span> </label></a></li>\r\n");
      out.write("		</ul>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("	    // 이벤트 리스너 추가\r\n");
      out.write("	    document.querySelectorAll('.genre-checkbox').forEach(checkbox => {\r\n");
      out.write("	        checkbox.addEventListener('change', function() {\r\n");
      out.write("	            sendGenres();\r\n");
      out.write("	        });\r\n");
      out.write("	    });\r\n");
      out.write("	\r\n");
      out.write("	    function getSelectedGenres() {\r\n");
      out.write("	        return Array.from(document.querySelectorAll('.genre-checkbox:checked'))\r\n");
      out.write("	            .map(checkbox => checkbox.value);\r\n");
      out.write("	    }\r\n");
      out.write("	\r\n");
      out.write("	    function sendGenres() {\r\n");
      out.write("	        const selectedGenres = getSelectedGenres();\r\n");
      out.write("	        \r\n");
      out.write("	        fetch('/vinyl/filter', {\r\n");
      out.write("	            method: 'POST',\r\n");
      out.write("	            headers: { 'Content-Type': 'application/json' },\r\n");
      out.write("	            body: JSON.stringify({ genres: selectedGenres })\r\n");
      out.write("	        })\r\n");
      out.write("	        .then(response => response.json())\r\n");
      out.write("	        .then(data => { console.log('Response:', data); })\r\n");
      out.write("	        .catch(error => {\r\n");
      out.write("	            console.error('Error:', error);\r\n");
      out.write("	        });\r\n");
      out.write("	    }\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
